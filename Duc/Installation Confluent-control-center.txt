Installation Confluent-control-center and Confluent-platform with Archive Kraft Mode


	1. Download Confluent Platform archive
		wget https://packages.confluent.io/archive/8.0/confluent-8.0.0.tar.gz
		tar -xvf confluent-8.0.0.tar.gz
		cd confluent-8.0.0
		export CONFLUENT_HOME=`pwd`
		export PATH=$CONFLUENT_HOME/bin:$PATH

	2. Download Confluent Control Center
		wget https://packages.confluent.io/confluent-control-center-next-gen/archive/confluent-control-center-next-gen-2.2.0.tar.gz
		tar -xvf confluent-control-center-next-gen-2.2.0.tar.gz
		cd confluent-control-center-next-gen-2.2.0
		export C3_HOME=`pwd`
		export PATH=$C3_HOME/bin:$PATH
	3. Update controller properties and broker.properties by add code block to the end of properties files
		metric.reporters=io.confluent.telemetry.reporter.TelemetryReporter
confluent.telemetry.exporter._c3.type=http
confluent.telemetry.exporter._c3.enabled=true
confluent.telemetry.exporter._c3.metrics.include=io.confluent.kafka.server.request.(?!.*delta).*|io.confluent.kafka.server.server.broker.state|io.confluent.kafka.server.replica.manager.leader.count|io.confluent.kafka.server.request.queue.size|io.confluent.kafka.server.broker.topic.failed.produce.requests.rate.1.min|io.confluent.kafka.server.tier.archiver.total.lag|io.confluent.kafka.server.request.total.time.ms.p99|io.confluent.kafka.server.broker.topic.failed.fetch.requests.rate.1.min|io.confluent.kafka.server.broker.topic.total.fetch.requests.rate.1.min|io.confluent.kafka.server.partition.caught.up.replicas.count|io.confluent.kafka.server.partition.observer.replicas.count|io.confluent.kafka.server.tier.tasks.num.partitions.in.error|io.confluent.kafka.server.broker.topic.bytes.out.rate.1.min|io.confluent.kafka.server.request.total.time.ms.p95|io.confluent.kafka.server.controller.active.controller.count|io.confluent.kafka.server.session.expire.listener.zookeeper.disconnects.total|io.confluent.kafka.server.request.total.time.ms.p999|io.confluent.kafka.server.controller.active.broker.count|io.confluent.kafka.server.request.handler.pool.request.handler.avg.idle.percent.rate.1.min|io.confluent.kafka.server.session.expire.listener.zookeeper.disconnects.rate.1.min|io.confluent.kafka.server.controller.unclean.leader.elections.rate.1.min|io.confluent.kafka.server.replica.manager.partition.count|io.confluent.kafka.server.controller.unclean.leader.elections.total|io.confluent.kafka.server.partition.replicas.count|io.confluent.kafka.server.broker.topic.total.produce.requests.rate.1.min|io.confluent.kafka.server.controller.offline.partitions.count|io.confluent.kafka.server.socket.server.network.processor.avg.idle.percent|io.confluent.kafka.server.partition.under.replicated|io.confluent.kafka.server.log.log.start.offset|io.confluent.kafka.server.log.tier.size|io.confluent.kafka.server.log.size|io.confluent.kafka.server.tier.fetcher.bytes.fetched.total|io.confluent.kafka.server.request.total.time.ms.p50|io.confluent.kafka.server.tenant.consumer.lag.offsets|io.confluent.kafka.server.session.expire.listener.zookeeper.expires.rate.1.min|io.confluent.kafka.server.log.log.end.offset|io.confluent.kafka.server.broker.topic.bytes.in.rate.1.min|io.confluent.kafka.server.partition.under.min.isr|io.confluent.kafka.server.partition.in.sync.replicas.count|io.confluent.telemetry.http.exporter.batches.dropped|io.confluent.telemetry.http.exporter.items.total|io.confluent.telemetry.http.exporter.items.succeeded|io.confluent.telemetry.http.exporter.send.time.total.millis|io.confluent.kafka.server.controller.leader.election.rate.(?!.*delta).*|io.confluent.telemetry.http.exporter.batches.failed
confluent.telemetry.exporter._c3.client.base.url=http://localhost:9090/api/v1/otlp
confluent.telemetry.exporter._c3.client.compression=gzip
confluent.telemetry.exporter._c3.api.key=dummy
confluent.telemetry.exporter._c3.api.secret=dummy
confluent.telemetry.exporter._c3.buffer.pending.batches.max=80
confluent.telemetry.exporter._c3.buffer.batch.items.max=4000
confluent.telemetry.exporter._c3.buffer.inflight.submissions.max=10
confluent.telemetry.metrics.collector.interval.ms=60000
confluent.telemetry.remoteconfig._confluent.enabled=false
confluent.consumer.lag.emitter.enabled=true
	
	4. Start Prometheus and Alertmanager
	To start Control Center, you must have three dedicated command windows: one for Prometheus, another for the Control Center process, and a third dedicated command window for Alertmanager. Run the following commands from $C3_HOME in all command windows.
	Open etc/confluent-control-center/prometheus-generated.yml  change localhost:9093 to localhost:9098 
	
	5. Start Prometheus.
		bin/prometheus-start

	6. Start Alertmanager
		export ALERTMANAGER_PORT=9098
		bin/alertmanager-start

	7. Start Control Center.
		open etc/confluent-control-center/control-center-dev.properties and update port 9093 to 9098
				confluent.controlcenter.alertmanager.url=http://localhost:9098
		and run cammand: bin/control-center-start etc/confluent-control-center/control-center-dev.properties
	8. Start Confluent Platform.
		Để chạy confluent platform, cần 2 cửa sổ, 1 chạy broker, 1 chạy controller. Cần tạo ID dùng cho cả 2
			tạo Cluster_id: KAFKA_CLUSTER_ID="$(bin/kafka-storage random-uuid)"
			echo $KAFKA_CLUSTER_ID
			Format the log directories for the controller: bin/kafka-storage format --cluster-id $KAFKA_CLUSTER_ID -c etc/kafka/controller.properties --standalone
			start controller: bin/kafka-server-start etc/kafka/controller.properties
			Format the log directories for this broker: bin/kafka-storage format --cluster-id $KAFKA_CLUSTER_ID -c etc/kafka/broker.properties
			Start broker: bin/kafka-server-start etc/kafka/broker.properties


Notes: Chạy confluent Server thay thì chạy riêng cả 2 

			Format the log directories for the controller: bin/kafka-storage format --cluster-id $KAFKA_CLUSTER_ID -c etc/kafka/server.properties --standalone
			bin/kafka-server-start etc/kafka/server.properties

		
		

	